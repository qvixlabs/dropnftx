import{W as g,_ as w,a as d,e as h,f as u,U as l,h as p,n as f,c as C,d as y,m as v,o as I,ao as P,ap as E,S as W,aq as A}from"./index-e9dc9249.js";import{g as U}from"./url-bc88b2b6.browser.esm-9e168dd7.js";function S(o){var i;if(!o)return"Injected";const t=e=>{if(e.isAvalanche)return"Core Wallet";if(e.isBitKeep)return"BitKeep";if(e.isBraveWallet)return"Brave Wallet";if(e.isCoinbaseWallet)return"Coinbase Wallet";if(e.isExodus)return"Exodus";if(e.isFrame)return"Frame";if(e.isKuCoinWallet)return"KuCoin Wallet";if(e.isMathWallet)return"MathWallet";if(e.isOneInchIOSWallet||e.isOneInchAndroidWallet)return"1inch Wallet";if(e.isOpera)return"Opera";if(e.isPortal)return"Ripio Portal";if(e.isTally)return"Tally";if(e.isTokenPocket)return"TokenPocket";if(e.isTokenary)return"Tokenary";if(e.isTrust||e.isTrustWallet)return"Trust Wallet";if(e.isMetaMask)return"MetaMask"};if((i=o.providers)!=null&&i.length){const e=new Set;let a=1;for(const s of o.providers){let r=t(s);r||(r=`Unknown Wallet #${a}`,a+=1),e.add(r)}const n=[...e];return n.length?n:n[0]??"Injected"}return t(o)??"Injected"}var m=new WeakMap;class k extends g{constructor(t){const e={...{shimDisconnect:!0,getProvider:()=>{if(A(globalThis.window))return globalThis.window.ethereum}},...t.options};super({chains:t.chains,options:e}),w(this,m,{writable:!0,value:void 0}),d(this,"shimDisconnectKey","injected.shimDisconnect"),d(this,"onAccountsChanged",async n=>{n.length===0?this.emit("disconnect"):this.emit("change",{account:u(n[0])})}),d(this,"onChainChanged",n=>{const s=f(n),r=this.isChainUnsupported(s);this.emit("change",{chain:{id:s,unsupported:r}})}),d(this,"onDisconnect",async n=>{if(n.code===1013&&await this.getProvider())try{if(await this.getAccount())return}catch{}this.emit("disconnect"),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey)});const a=e.getProvider();if(typeof e.name=="string")this.name=e.name;else if(a){const n=S(a);e.name?this.name=e.name(n):typeof n=="string"?this.name=n:this.name=n[0]}else this.name="Injected";this.id="injected",this.ready=!!a,this.connectorStorage=t.connectorStorage}async connect(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const i=await this.getProvider();if(!i)throw new h;this.setupListeners(),this.emit("message",{type:"connecting"});const e=await i.request({method:"eth_requestAccounts"}),a=u(e[0]);let n=await this.getChainId(),s=this.isChainUnsupported(n);if(t.chainId&&n!==t.chainId)try{await this.switchChain(t.chainId),n=t.chainId,s=this.isChainUnsupported(t.chainId)}catch(c){console.error(`Could not switch to chain id: ${t.chainId}`,c)}this.options.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const r={account:a,chain:{id:n,unsupported:s},provider:i};return this.emit("connect",r),r}catch(i){throw this.isUserRejectedRequestError(i)?new l(i):i.code===-32002?new p(i):i}}async disconnect(){const t=await this.getProvider();t!=null&&t.removeListener&&(t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey))}async getAccount(){const t=await this.getProvider();if(!t)throw new h;const i=await t.request({method:"eth_accounts"});return u(i[0])}async getChainId(){const t=await this.getProvider();if(!t)throw new h;return t.request({method:"eth_chainId"}).then(f)}async getProvider(){const t=this.options.getProvider();return t&&C(this,m,t),y(this,m)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[i,e]=await Promise.all([this.getProvider(),this.getAccount()]);return new v(i,t).getSigner(e)}async isAuthorized(){try{if(this.options.shimDisconnect&&!await this.connectorStorage.getItem(this.shimDisconnectKey))return!1;if(!await this.getProvider())throw new h;return!!await this.getAccount()}catch{return!1}}async switchChain(t){var a,n;const i=await this.getProvider();if(!i)throw new h;const e=I(t);try{await i.request({method:"wallet_switchEthereumChain",params:[{chainId:e}]});const s=this.chains.find(r=>r.chainId===t);return s||{chainId:t,name:`Chain ${e}`,slug:`${e}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],chain:"",shortName:"",testnet:!0}}catch(s){const r=this.chains.find(c=>c.chainId===t);if(!r)throw new P({chainId:t,connectorId:this.id});if(s.code===4902||((n=(a=s==null?void 0:s.data)==null?void 0:a.originalError)==null?void 0:n.code)===4902)try{return await i.request({method:"wallet_addEthereumChain",params:[{chainId:e,chainName:r.name,nativeCurrency:r.nativeCurrency,rpcUrls:U(r),blockExplorerUrls:this.getBlockExplorerUrls(r)}]}),r}catch(c){throw this.isUserRejectedRequestError(c)?new l(s):new E}throw this.isUserRejectedRequestError(s)?new l(s):new W(s)}}async setupListeners(){const t=await this.getProvider();t.on&&(t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect))}isUserRejectedRequestError(t){return t.code===4001}}export{k as InjectedConnector};
