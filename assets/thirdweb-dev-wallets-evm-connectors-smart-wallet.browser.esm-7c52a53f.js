import{b as L,cO as h,d8 as j,d6 as T,df as x,cN as be,dg as ge,dh as Ae,C as Pe,g as je,di as Te,f as X,dj as b,B as v,dk as q,ax as Q,dl as Oe,dm as xe,dn as Ce,dp as ke,dq as Ie,be as _e,dr as Ee,o as de,ds as Se,a as ue,x as Ue,dt as De,du as Ge,dv as Re,dw as Le,dx as $e,dy as O,az as Z,cA as Ne,cB as He,dz as Be}from"./index-e9dc9249.js";import{b as C}from"./browser-d497c7d7.js";import{r as Me}from"./index-590714cc.js";import{i as me}from"./url-bc88b2b6.browser.esm-9e168dd7.js";var G={},k={},$={},g={},N={};const Fe="@account-abstraction/utils",Ve="0.5.0",ze="./dist/src/index.js",We="MIT",Ke=["dist/*","contracts/*","README.md"],Je={clear:"rm -rf dist artifacts cache src/types","hardhat-compile":"hardhat compile","lint-fix":"eslint -f unix . --fix","watch-tsc":"tsc -w --preserveWatchOutput",tsc:"tsc"},qe={"@account-abstraction/contracts":"^0.5.0","@ethersproject/abi":"^5.7.0","@ethersproject/providers":"^5.7.0","@openzeppelin/contracts":"^4.7.3",debug:"^4.3.4",ethers:"^5.7.0"},Ze={"@nomicfoundation/hardhat-toolbox":"^1.0.2","@nomiclabs/hardhat-ethers":"^2.0.0",hardhat:"^2.11.0"},Ye="366c7b65af9be8a31f18db939ee05ee298c086cb",Xe={name:Fe,version:Ve,main:ze,license:We,files:Ke,scripts:Je,dependencies:qe,devDependencies:Ze,gitHead:Ye};Object.defineProperty(N,"__esModule",{value:!0});N.erc4337RuntimeVersion=void 0;N.erc4337RuntimeVersion=Xe.version;var y={};const Qe="hh-sol-artifact-1",et="IEntryPoint",tt="contracts/interfaces/IEntryPoint.sol",st=[{inputs:[{internalType:"uint256",name:"preOpGas",type:"uint256"},{internalType:"uint256",name:"paid",type:"uint256"},{internalType:"uint48",name:"validAfter",type:"uint48"},{internalType:"uint48",name:"validUntil",type:"uint48"},{internalType:"bool",name:"targetSuccess",type:"bool"},{internalType:"bytes",name:"targetResult",type:"bytes"}],name:"ExecutionResult",type:"error"},{inputs:[{internalType:"uint256",name:"opIndex",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"FailedOp",type:"error"},{inputs:[{internalType:"address",name:"sender",type:"address"}],name:"SenderAddressResult",type:"error"},{inputs:[{internalType:"address",name:"aggregator",type:"address"}],name:"SignatureValidationFailed",type:"error"},{inputs:[{components:[{internalType:"uint256",name:"preOpGas",type:"uint256"},{internalType:"uint256",name:"prefund",type:"uint256"},{internalType:"bool",name:"sigFailed",type:"bool"},{internalType:"uint48",name:"validAfter",type:"uint48"},{internalType:"uint48",name:"validUntil",type:"uint48"},{internalType:"bytes",name:"paymasterContext",type:"bytes"}],internalType:"struct IEntryPoint.ReturnInfo",name:"returnInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"senderInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"factoryInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"paymasterInfo",type:"tuple"}],name:"ValidationResult",type:"error"},{inputs:[{components:[{internalType:"uint256",name:"preOpGas",type:"uint256"},{internalType:"uint256",name:"prefund",type:"uint256"},{internalType:"bool",name:"sigFailed",type:"bool"},{internalType:"uint48",name:"validAfter",type:"uint48"},{internalType:"uint48",name:"validUntil",type:"uint48"},{internalType:"bytes",name:"paymasterContext",type:"bytes"}],internalType:"struct IEntryPoint.ReturnInfo",name:"returnInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"senderInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"factoryInfo",type:"tuple"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"paymasterInfo",type:"tuple"},{components:[{internalType:"address",name:"aggregator",type:"address"},{components:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],internalType:"struct IStakeManager.StakeInfo",name:"stakeInfo",type:"tuple"}],internalType:"struct IEntryPoint.AggregatorStakeInfo",name:"aggregatorInfo",type:"tuple"}],name:"ValidationResultWithAggregation",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"userOpHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"address",name:"factory",type:"address"},{indexed:!1,internalType:"address",name:"paymaster",type:"address"}],name:"AccountDeployed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"totalDeposit",type:"uint256"}],name:"Deposited",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"aggregator",type:"address"}],name:"SignatureAggregatorChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"totalStaked",type:"uint256"},{indexed:!1,internalType:"uint256",name:"unstakeDelaySec",type:"uint256"}],name:"StakeLocked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"withdrawTime",type:"uint256"}],name:"StakeUnlocked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"address",name:"withdrawAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"StakeWithdrawn",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"userOpHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!0,internalType:"address",name:"paymaster",type:"address"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"},{indexed:!1,internalType:"bool",name:"success",type:"bool"},{indexed:!1,internalType:"uint256",name:"actualGasCost",type:"uint256"},{indexed:!1,internalType:"uint256",name:"actualGasUsed",type:"uint256"}],name:"UserOperationEvent",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"userOpHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"},{indexed:!1,internalType:"bytes",name:"revertReason",type:"bytes"}],name:"UserOperationRevertReason",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"address",name:"withdrawAddress",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdrawn",type:"event"},{inputs:[{internalType:"uint32",name:"_unstakeDelaySec",type:"uint32"}],name:"addStake",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"depositTo",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"getDepositInfo",outputs:[{components:[{internalType:"uint112",name:"deposit",type:"uint112"},{internalType:"bool",name:"staked",type:"bool"},{internalType:"uint112",name:"stake",type:"uint112"},{internalType:"uint32",name:"unstakeDelaySec",type:"uint32"},{internalType:"uint48",name:"withdrawTime",type:"uint48"}],internalType:"struct IStakeManager.DepositInfo",name:"info",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"initCode",type:"bytes"}],name:"getSenderAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"bytes",name:"initCode",type:"bytes"},{internalType:"bytes",name:"callData",type:"bytes"},{internalType:"uint256",name:"callGasLimit",type:"uint256"},{internalType:"uint256",name:"verificationGasLimit",type:"uint256"},{internalType:"uint256",name:"preVerificationGas",type:"uint256"},{internalType:"uint256",name:"maxFeePerGas",type:"uint256"},{internalType:"uint256",name:"maxPriorityFeePerGas",type:"uint256"},{internalType:"bytes",name:"paymasterAndData",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct UserOperation",name:"userOp",type:"tuple"}],name:"getUserOpHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"bytes",name:"initCode",type:"bytes"},{internalType:"bytes",name:"callData",type:"bytes"},{internalType:"uint256",name:"callGasLimit",type:"uint256"},{internalType:"uint256",name:"verificationGasLimit",type:"uint256"},{internalType:"uint256",name:"preVerificationGas",type:"uint256"},{internalType:"uint256",name:"maxFeePerGas",type:"uint256"},{internalType:"uint256",name:"maxPriorityFeePerGas",type:"uint256"},{internalType:"bytes",name:"paymasterAndData",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct UserOperation[]",name:"userOps",type:"tuple[]"},{internalType:"contract IAggregator",name:"aggregator",type:"address"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct IEntryPoint.UserOpsPerAggregator[]",name:"opsPerAggregator",type:"tuple[]"},{internalType:"address payable",name:"beneficiary",type:"address"}],name:"handleAggregatedOps",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"bytes",name:"initCode",type:"bytes"},{internalType:"bytes",name:"callData",type:"bytes"},{internalType:"uint256",name:"callGasLimit",type:"uint256"},{internalType:"uint256",name:"verificationGasLimit",type:"uint256"},{internalType:"uint256",name:"preVerificationGas",type:"uint256"},{internalType:"uint256",name:"maxFeePerGas",type:"uint256"},{internalType:"uint256",name:"maxPriorityFeePerGas",type:"uint256"},{internalType:"bytes",name:"paymasterAndData",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct UserOperation[]",name:"ops",type:"tuple[]"},{internalType:"address payable",name:"beneficiary",type:"address"}],name:"handleOps",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"bytes",name:"initCode",type:"bytes"},{internalType:"bytes",name:"callData",type:"bytes"},{internalType:"uint256",name:"callGasLimit",type:"uint256"},{internalType:"uint256",name:"verificationGasLimit",type:"uint256"},{internalType:"uint256",name:"preVerificationGas",type:"uint256"},{internalType:"uint256",name:"maxFeePerGas",type:"uint256"},{internalType:"uint256",name:"maxPriorityFeePerGas",type:"uint256"},{internalType:"bytes",name:"paymasterAndData",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct UserOperation",name:"op",type:"tuple"},{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"targetCallData",type:"bytes"}],name:"simulateHandleOp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"sender",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"bytes",name:"initCode",type:"bytes"},{internalType:"bytes",name:"callData",type:"bytes"},{internalType:"uint256",name:"callGasLimit",type:"uint256"},{internalType:"uint256",name:"verificationGasLimit",type:"uint256"},{internalType:"uint256",name:"preVerificationGas",type:"uint256"},{internalType:"uint256",name:"maxFeePerGas",type:"uint256"},{internalType:"uint256",name:"maxPriorityFeePerGas",type:"uint256"},{internalType:"bytes",name:"paymasterAndData",type:"bytes"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct UserOperation",name:"userOp",type:"tuple"}],name:"simulateValidation",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unlockStake",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"withdrawAddress",type:"address"}],name:"withdrawStake",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"withdrawAddress",type:"address"},{internalType:"uint256",name:"withdrawAmount",type:"uint256"}],name:"withdrawTo",outputs:[],stateMutability:"nonpayable",type:"function"}],at="0x",nt="0x",rt={},it={},ot={_format:Qe,contractName:et,sourceName:tt,abi:st,bytecode:at,deployedBytecode:nt,linkReferences:rt,deployedLinkReferences:it};var lt=h&&h.__importDefault||function(n){return n&&n.__esModule?n:{default:n}},F;Object.defineProperty(y,"__esModule",{value:!0});y.resolveHexlify=y.deepHexlify=y.rethrowError=y.decodeErrorReason=y.getUserOpHash=y.packUserOp=y.AddressZero=void 0;const f=j,we=ot,ct=T,dt=lt(C),ut=(0,dt.default)("aa.utils"),pe="simulateValidation",he=(F=we.abi.find(n=>n.name===pe))===null||F===void 0?void 0:F.inputs[0];if(he==null)throw new Error(`unable to find method ${pe} in EP ${we.abi.filter(n=>n.type==="function").map(n=>n.name).join(",")}`);y.AddressZero=ct.ethers.constants.AddressZero;function mt(n,e){const t=n.map(a=>a.type==="bytes"&&e?"bytes32":a.type),s=n.map(a=>a.type==="bytes"&&e?(0,f.keccak256)(a.val):a.val);return f.defaultAbiCoder.encode(t,s)}function ye(n,e=!0){if(e){const s={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes",name:"initCode"},{type:"bytes",name:"callData"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes",name:"paymasterAndData"},{type:"bytes",name:"signature"}],name:"userOp",type:"tuple"};let a=f.defaultAbiCoder.encode([s],[Object.assign(Object.assign({},n),{signature:"0x"})]);return a="0x"+a.slice(66,a.length-64),a}const t=he.components.map(s=>({type:s.type,val:n[s.name]}));return mt(t,e)}y.packUserOp=ye;function wt(n,e,t){const s=(0,f.keccak256)(ye(n,!0)),a=f.defaultAbiCoder.encode(["bytes32","address","uint256"],[s,e,t]);return(0,f.keccak256)(a)}y.getUserOpHash=wt;const ve=(0,f.keccak256)(L.Buffer.from("Error(string)")).slice(0,10),pt=(0,f.keccak256)(L.Buffer.from("FailedOp(uint256,string)")).slice(0,10);function fe(n){if(ut("decoding",n),n.startsWith(ve)){const[e]=f.defaultAbiCoder.decode(["string"],"0x"+n.substring(10));return{message:e}}else if(n.startsWith(pt)){let[e,t]=f.defaultAbiCoder.decode(["uint256","string"],"0x"+n.substring(10));return t=`FailedOp: ${t}`,{message:t,opIndex:e}}}y.decodeErrorReason=fe;function ht(n){let e=n,t=n;for((e==null?void 0:e.error)!=null&&(e=e.error);(e==null?void 0:e.data)!=null;)t=e,e=e.data;const s=typeof e=="string"&&e.length>2?fe(e):void 0;if(s!=null&&(n.message=s.message,s.opIndex!=null)){const a=(0,f.hexConcat)([ve,f.defaultAbiCoder.encode(["string"],[s.message])]);t.data=a}throw n}y.rethrowError=ht;function R(n){if(typeof n!="function")return n==null||typeof n=="string"||typeof n=="boolean"?n:n._isBigNumber!=null||typeof n!="object"?(0,f.hexlify)(n).replace(/^0x0/,"0x"):Array.isArray(n)?n.map(e=>R(e)):Object.keys(n).reduce((e,t)=>Object.assign(Object.assign({},e),{[t]:R(n[t])}),{})}y.deepHexlify=R;async function yt(n){return R(await(0,f.resolveProperties)(n))}y.resolveHexlify=yt;(function(n){var e=h&&h.__createBinding||(Object.create?function(s,a,r,i){i===void 0&&(i=r);var o=Object.getOwnPropertyDescriptor(a,r);(!o||("get"in o?!a.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return a[r]}}),Object.defineProperty(s,i,o)}:function(s,a,r,i){i===void 0&&(i=r),s[i]=a[r]}),t=h&&h.__exportStar||function(s,a){for(var r in s)r!=="default"&&!Object.prototype.hasOwnProperty.call(a,r)&&e(a,s,r)};Object.defineProperty(n,"__esModule",{value:!0}),t(N,n),t(y,n)})(g);var Y={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.calcPreVerificationGas=n.DefaultGasOverheads=void 0;const e=g,t=j;n.DefaultGasOverheads={fixed:21e3,perUserOp:18300,perUserOpWord:4,zeroByte:4,nonZeroByte:16,bundleSize:1,sigSize:65};function s(a,r){const i=Object.assign(Object.assign({},n.DefaultGasOverheads),r??{}),o=Object.assign({preVerificationGas:21e3,signature:(0,t.hexlify)(L.Buffer.alloc(i.sigSize,1))},a),l=(0,t.arrayify)((0,e.packUserOp)(o,!1)),d=(l.length+31)/32,p=l.map(c=>c===0?i.zeroByte:i.nonZeroByte).reduce((c,m)=>c+m);return Math.round(p+i.fixed/i.bundleSize+i.perUserOp+i.perUserOpWord*d)}n.calcPreVerificationGas=s})(Y);Object.defineProperty($,"__esModule",{value:!0});$.BaseAccountAPI=void 0;const D=T,vt=x,ee=j,te=g,ft=Y;let bt=class{constructor(e){this.isPhantom=!0,this.provider=e.provider,this.overheads=e.overheads,this.entryPointAddress=e.entryPointAddress,this.accountAddress=e.accountAddress,this.paymasterAPI=e.paymasterAPI,this.entryPointView=vt.EntryPoint__factory.connect(e.entryPointAddress,e.provider).connect(D.ethers.constants.AddressZero)}async init(){if(await this.provider.getCode(this.entryPointAddress)==="0x")throw new Error(`entryPoint not deployed at ${this.entryPointAddress}`);return await this.getAccountAddress(),this}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getCounterFactualAddress(){const e=this.getAccountInitCode();try{await this.entryPointView.callStatic.getSenderAddress(e)}catch(t){return t.errorArgs.sender}throw new Error("must handle revert")}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getPreVerificationGas(e){const t=await(0,ee.resolveProperties)(e);return(0,ft.calcPreVerificationGas)(t,this.overheads)}packUserOp(e){return(0,te.packUserOp)(e,!1)}async encodeUserOpCallDataAndGasLimit(e){var t,s;function a(l){return l==null||l===""?null:D.BigNumber.from(l.toString())}const r=(t=a(e.value))!==null&&t!==void 0?t:D.BigNumber.from(0),i=await this.encodeExecute(e.target,r,e.data),o=(s=a(e.gasLimit))!==null&&s!==void 0?s:await this.provider.estimateGas({from:this.entryPointAddress,to:this.getAccountAddress(),data:i});return{callData:i,callGasLimit:o}}async getUserOpHash(e){const t=await(0,ee.resolveProperties)(e),s=await this.provider.getNetwork().then(a=>a.chainId);return(0,te.getUserOpHash)(t,this.entryPointAddress,s)}async getAccountAddress(){return this.senderAddress==null&&(this.accountAddress!=null?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(e){if(e==null||e==="0x")return 0;const t=e.substring(0,42),s="0x"+e.substring(42);return await this.provider.estimateGas({to:t,data:s})}async createUnsignedUserOp(e){var t,s;const{callData:a,callGasLimit:r}=await this.encodeUserOpCallDataAndGasLimit(e),i=await this.getInitCode(),o=await this.estimateCreationGas(i),l=D.BigNumber.from(await this.getVerificationGasLimit()).add(o);let{maxFeePerGas:d,maxPriorityFeePerGas:p}=e;if(d==null||p==null){const m=await this.provider.getFeeData();d==null&&(d=(t=m.maxFeePerGas)!==null&&t!==void 0?t:void 0),p==null&&(p=(s=m.maxPriorityFeePerGas)!==null&&s!==void 0?s:void 0)}const u={sender:this.getAccountAddress(),nonce:this.getNonce(),initCode:i,callData:a,callGasLimit:r,verificationGasLimit:l,maxFeePerGas:d,maxPriorityFeePerGas:p,paymasterAndData:"0x"};let c;if(this.paymasterAPI!=null){const m=Object.assign(Object.assign({},u),{preVerificationGas:await this.getPreVerificationGas(u)});c=await this.paymasterAPI.getPaymasterAndData(m)}return u.paymasterAndData=c??"0x",Object.assign(Object.assign({},u),{preVerificationGas:this.getPreVerificationGas(u),signature:""})}async signUserOp(e){const t=await this.getUserOpHash(e),s=this.signUserOpHash(t);return Object.assign(Object.assign({},e),{signature:s})}async createSignedUserOp(e){return await this.signUserOp(await this.createUnsignedUserOp(e))}async getUserOpReceipt(e,t=3e4,s=5e3){const a=Date.now()+t;for(;Date.now()<a;){const r=await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(e));if(r.length>0)return r[0].transactionHash;await new Promise(i=>setTimeout(i,s))}return null}};$.BaseAccountAPI=bt;Object.defineProperty(k,"__esModule",{value:!0});k.SimpleAccountAPI=void 0;const gt=T,se=x,ae=j,At=$;class Pt extends At.BaseAccountAPI{constructor(e){var t;super(e),this.factoryAddress=e.factoryAddress,this.owner=e.owner,this.index=(t=e.index)!==null&&t!==void 0?t:0}async _getAccountContract(){return this.accountContract==null&&(this.accountContract=se.SimpleAccount__factory.connect(await this.getAccountAddress(),this.provider)),this.accountContract}async getAccountInitCode(){if(this.factory==null)if(this.factoryAddress!=null&&this.factoryAddress!=="")this.factory=se.SimpleAccountFactory__factory.connect(this.factoryAddress,this.provider);else throw new Error("no factory to get initCode");return(0,ae.hexConcat)([this.factory.address,this.factory.interface.encodeFunctionData("createAccount",[await this.owner.getAddress(),this.index])])}async getNonce(){return await this.checkAccountPhantom()?gt.BigNumber.from(0):await(await this._getAccountContract()).nonce()}async encodeExecute(e,t,s){return(await this._getAccountContract()).interface.encodeFunctionData("execute",[e,t,s])}async signUserOpHash(e){return await this.owner.signMessage((0,ae.arrayify)(e))}}k.SimpleAccountAPI=Pt;var H={};Object.defineProperty(H,"__esModule",{value:!0});H.PaymasterAPI=void 0;class jt{async getPaymasterAndData(e){return"0x"}}H.PaymasterAPI=jt;var B={},I={};const Tt=be(ge);var _={};Object.defineProperty(_,"__esModule",{value:!0});_.ERC4337EthersSigner=void 0;const Ot=Ae,xt=Me;let Ct=class extends xt.Signer{constructor(e,t,s,a,r){super(),this.config=e,this.originalSigner=t,this.erc4337provider=s,this.httpRpcClient=a,this.smartAccountAPI=r,(0,Ot.defineReadOnly)(this,"provider",s)}async sendTransaction(e){var t,s,a;const r=await this.populateTransaction(e);await this.verifyAllNecessaryFields(r);const i=await this.smartAccountAPI.createSignedUserOp({target:(t=r.to)!==null&&t!==void 0?t:"",data:(a=(s=r.data)===null||s===void 0?void 0:s.toString())!==null&&a!==void 0?a:"",value:r.value,gasLimit:r.gasLimit}),o=await this.erc4337provider.constructUserOpTransactionResponse(i);try{await this.httpRpcClient.sendUserOpToBundler(i)}catch(l){throw this.unwrapError(l)}return o}unwrapError(e){var t;if(e.body!=null){const s=JSON.parse(e.body);let a="",r=(t=s==null?void 0:s.error)===null||t===void 0?void 0:t.message;if((r==null?void 0:r.includes("FailedOp"))===!0){const o=r.match(/FailedOp\((.*)\)/);if(o!=null){const l=o[1].split(",");a=`(paymaster address: ${l[1]})`,r=l[2]}}const i=new Error(`The bundler has failed to include UserOperation in a batch: ${r} ${a})`);return i.stack=e.stack,i}return e}async verifyAllNecessaryFields(e){if(e.to==null)throw new Error("Missing call target");if(e.data==null&&e.value==null)throw new Error("Missing call data or value")}connect(e){throw new Error("changing providers is not supported")}async getAddress(){return this.address==null&&(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(e){return await this.originalSigner.signMessage(e)}async signTransaction(e){throw new Error("not implemented")}async signUserOperation(e){const t=await this.smartAccountAPI.getUserOpHash(e);return await this.originalSigner.signMessage(t)}};_.ERC4337EthersSigner=Ct;var M={},kt=h&&h.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(M,"__esModule",{value:!0});M.UserOperationEventListener=void 0;const It=j,_t=kt(C),V=(0,_t.default)("aa.listener"),Et=1e4;let St=class{constructor(e,t,s,a,r,i,o){var l;this.resolve=e,this.reject=t,this.entryPoint=s,this.sender=a,this.userOpHash=r,this.nonce=i,this.timeout=o,this.resolved=!1,this.boundLisener=this.listenerCallback.bind(this),setTimeout(()=>{this.stop(),this.reject(new Error("Timed out"))},(l=this.timeout)!==null&&l!==void 0?l:Et)}start(){const e=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const t=await this.entryPoint.queryFilter(e,"latest");t.length>0?this.listenerCallback(t[0]):this.entryPoint.once(e,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(...e){var t;const s=arguments[arguments.length-1];if(s.args==null){console.error("got event without args",s);return}if(s.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${s.args.sender}@${s.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((t=this.nonce)===null||t===void 0?void 0:t.toString())}`);return}const a=await s.getTransactionReceipt();a.transactionHash=this.userOpHash,V("got event with status=",s.args.success,"gasUsed=",a.gasUsed),s.args.success||await this.extractFailureReason(a),this.stop(),this.resolve(a),this.resolved=!0}async extractFailureReason(e){V("mark tx as failed"),e.status=0;const t=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),e.blockHash);if(t[0]!=null){let s=t[0].args.revertReason;s.startsWith("0x08c379a0")&&(s=It.defaultAbiCoder.decode(["string"],"0x"+s.substring(10)).toString()),V(`rejecting with reason: ${s}`),this.reject(new Error(`UserOp failed with reason: ${s}`))}}};M.UserOperationEventListener=St;var Ut=h&&h.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(I,"__esModule",{value:!0});I.ERC4337EthersProvider=void 0;const Dt=Tt,z=T,ne=j,Gt=_,W=M,Rt=g,Lt=Ut(C),$t=(0,Lt.default)("aa.provider");let Nt=class extends Dt.BaseProvider{constructor(e,t,s,a,r,i,o){super({name:"ERC-4337 Custom Network",chainId:e}),this.chainId=e,this.config=t,this.originalSigner=s,this.originalProvider=a,this.httpRpcClient=r,this.entryPoint=i,this.smartAccountAPI=o,this.signer=new Gt.ERC4337EthersSigner(t,s,this,r,o)}async init(){return this.initializedBlockNumber=await this.originalProvider.getBlockNumber(),await this.smartAccountAPI.init(),this}getSigner(){return this.signer}async perform(e,t){if($t("perform",e,t),e==="sendTransaction"||e==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");return await this.originalProvider.perform(e,t)}async getTransaction(e){return await super.getTransaction(e)}async getTransactionReceipt(e){const t=await e,s=await this.getSenderAccountAddress();return await new Promise((a,r)=>{new W.UserOperationEventListener(a,r,this.entryPoint,s,t).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(e,t,s){const a=await this.getSenderAccountAddress();return await new Promise((r,i)=>{new W.UserOperationEventListener(r,i,this.entryPoint,a,e,void 0,s).start()})}async constructUserOpTransactionResponse(e){const t=await(0,ne.resolveProperties)(e),s=(0,Rt.getUserOpHash)(t,this.config.entryPointAddress,this.chainId),a=new Promise((r,i)=>{new W.UserOperationEventListener(r,i,this.entryPoint,t.sender,s,t.nonce).start()});return{hash:s,confirmations:0,from:t.sender,nonce:z.BigNumber.from(t.nonce).toNumber(),gasLimit:z.BigNumber.from(t.callGasLimit),value:z.BigNumber.from(0),data:(0,ne.hexValue)(t.callData),chainId:this.chainId,wait:async r=>{const i=await a;return t.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),i}}}async detectNetwork(){return this.originalProvider.detectNetwork()}};I.ERC4337EthersProvider=Nt;var E={},Ht=h&&h.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(E,"__esModule",{value:!0});E.HttpRpcClient=void 0;const Bt=T,K=j,Mt=Ht(C),re=g,Ft=(0,Mt.default)("aa.rpc");let Vt=class{constructor(e,t,s){this.bundlerUrl=e,this.entryPointAddress=t,this.chainId=s,this.userOpJsonRpcProvider=new Bt.ethers.providers.JsonRpcProvider(this.bundlerUrl,{name:"Connected bundler network",chainId:s}),this.initializing=this.validateChainId()}async validateChainId(){const e=await this.userOpJsonRpcProvider.send("eth_chainId",[]),t=parseInt(e);if(t!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${t}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(e){await this.initializing;const t=(0,re.deepHexlify)(await(0,K.resolveProperties)(e)),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",s),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[t,this.entryPointAddress])}async estimateUserOpGas(e){await this.initializing;const t=(0,re.deepHexlify)(await(0,K.resolveProperties)(e)),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_estimateUserOperationGas",s),await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[t,this.entryPointAddress])}async printUserOperation(e,[t,s]){const a=await(0,K.resolveProperties)(t);Ft("sending",e,Object.assign({},a),s)}};E.HttpRpcClient=Vt;var S={};Object.defineProperty(S,"__esModule",{value:!0});S.DeterministicDeployer=void 0;const zt=T,P=j;class w{static getAddress(e,t=0,s=[]){return w.getDeterministicDeployAddress(e,t,s)}static async deploy(e,t=0,s=[]){return await w.instance.deterministicDeploy(e,t,s)}constructor(e){this.provider=e}async isContractDeployed(e){return await this.provider.getCode(e).then(t=>t.length>2)}async isDeployerDeployed(){return await this.isContractDeployed(w.proxyAddress)}async deployFactory(){if(await this.isContractDeployed(w.proxyAddress))return;const e=await this.provider.getBalance(w.deploymentSignerAddress),t=zt.BigNumber.from(w.deploymentGasLimit).mul(w.deploymentGasPrice),s=this.provider.getSigner();if(e.lt(t)&&await s.sendTransaction({to:w.deploymentSignerAddress,value:t,gasLimit:w.deploymentGasLimit}),await this.provider.send("eth_sendRawTransaction",[w.deploymentTransaction]),!await this.isContractDeployed(w.proxyAddress))throw new Error("raw TX didn't deploy deployer!")}async getDeployTransaction(e,t=0,s=[]){await this.deployFactory();const a=(0,P.hexZeroPad)((0,P.hexlify)(t),32),r=w.getCtrCode(e,s);return{to:w.proxyAddress,data:(0,P.hexConcat)([a,r])}}static getCtrCode(e,t){if(typeof e!="string")return(0,P.hexlify)(e.getDeployTransaction(...t).data);if(t.length!==0)throw new Error("constructor params can only be passed to ContractFactory");return e}static getDeterministicDeployAddress(e,t=0,s=[]){const a=(0,P.hexZeroPad)((0,P.hexlify)(t),32),r=w.getCtrCode(e,s);return"0x"+(0,P.keccak256)((0,P.hexConcat)(["0xff",w.proxyAddress,a,(0,P.keccak256)(r)])).slice(-40)}async deterministicDeploy(e,t=0,s=[]){const a=w.getDeterministicDeployAddress(e,t,s);return await this.isContractDeployed(a)||await this.provider.getSigner().sendTransaction(await this.getDeployTransaction(e,t,s)),a}static init(e){this._instance=new w(e)}static get instance(){if(this._instance==null)throw new Error('must call "DeterministicDeployer.init(ethers.provider)" first');return this._instance}}S.DeterministicDeployer=w;w.proxyAddress="0x4e59b44847b379578588920ca78fbf26c0b4956c";w.deploymentTransaction="0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222";w.deploymentSignerAddress="0x3fab184622dc19b6109349b94811493bf2a45362";w.deploymentGasPrice=1e11;w.deploymentGasLimit=1e5;var Wt=h&&h.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(B,"__esModule",{value:!0});B.wrapProvider=void 0;const ie=x,Kt=k,Jt=I,qt=E,Zt=S,Yt=Wt(C),Xt=(0,Yt.default)("aa.wrapProvider");async function Qt(n,e,t=n.getSigner()){const s=ie.EntryPoint__factory.connect(e.entryPointAddress,n),r=await new Zt.DeterministicDeployer(n).deterministicDeploy(new ie.SimpleAccountFactory__factory,0,[s.address]),i=new Kt.SimpleAccountAPI({provider:n,entryPointAddress:s.address,owner:t,factoryAddress:r,paymasterAPI:e.paymasterAPI});Xt("config=",e);const o=await n.getNetwork().then(d=>d.chainId),l=new qt.HttpRpcClient(e.bundlerUrl,e.entryPointAddress,o);return await new Jt.ERC4337EthersProvider(o,e,t,n,l,s,i).init()}B.wrapProvider=Qt;(function(n){var e=h&&h.__createBinding||(Object.create?function(p,u,c,m){m===void 0&&(m=c);var A=Object.getOwnPropertyDescriptor(u,c);(!A||("get"in A?!u.__esModule:A.writable||A.configurable))&&(A={enumerable:!0,get:function(){return u[c]}}),Object.defineProperty(p,m,A)}:function(p,u,c,m){m===void 0&&(m=c),p[m]=u[c]}),t=h&&h.__exportStar||function(p,u){for(var c in p)c!=="default"&&!Object.prototype.hasOwnProperty.call(u,c)&&e(u,p,c)};Object.defineProperty(n,"__esModule",{value:!0}),n.DeterministicDeployer=n.HttpRpcClient=n.ERC4337EthersProvider=n.ERC4337EthersSigner=n.wrapProvider=n.PaymasterAPI=n.SimpleAccountAPI=void 0;var s=k;Object.defineProperty(n,"SimpleAccountAPI",{enumerable:!0,get:function(){return s.SimpleAccountAPI}});var a=H;Object.defineProperty(n,"PaymasterAPI",{enumerable:!0,get:function(){return a.PaymasterAPI}});var r=B;Object.defineProperty(n,"wrapProvider",{enumerable:!0,get:function(){return r.wrapProvider}});var i=_;Object.defineProperty(n,"ERC4337EthersSigner",{enumerable:!0,get:function(){return i.ERC4337EthersSigner}});var o=I;Object.defineProperty(n,"ERC4337EthersProvider",{enumerable:!0,get:function(){return o.ERC4337EthersProvider}});var l=E;Object.defineProperty(n,"HttpRpcClient",{enumerable:!0,get:function(){return l.HttpRpcClient}});var d=S;Object.defineProperty(n,"DeterministicDeployer",{enumerable:!0,get:function(){return d.DeterministicDeployer}}),t(Y,n)})(G);function es(n){return b(n).then(e=>Object.keys(e).map(t=>{let s=e[t];return(typeof s!="string"||!s.startsWith("0x"))&&(s=de(s)),[t,s]}).reduce((t,s)=>{let[a,r]=s;return{...t,[a]:r}},{}))}async function ts(n,e,t){const s=await b(n),a={sender:s.sender,nonce:s.nonce,initCodeHash:O(s.initCode),callDataHash:O(s.callData),callGasLimit:s.callGasLimit,verificationGasLimit:s.verificationGasLimit,preVerificationGas:s.preVerificationGas,maxFeePerGas:s.maxFeePerGas,maxPriorityFeePerGas:s.maxPriorityFeePerGas,paymasterAndDataHash:O(s.paymasterAndData)},r={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"},i=Z.encode([r],[{...a}]),o=O(i),l=Z.encode(["bytes32","address","uint256"],[o,e,t]);return O(l)}const ss=()=>{const n=BigInt(Math.floor(Math.random()*4294967296)),e=BigInt(Math.floor(Math.random()*4294967296)),t=BigInt(Math.floor(Math.random()*4294967296)),s=BigInt(Math.floor(Math.random()*4294967296)),a=BigInt(Math.floor(Math.random()*4294967296)),r=BigInt(Math.floor(Math.random()*4294967296));return n<<BigInt(160)|e<<BigInt(128)|t<<BigInt(96)|s<<BigInt(64)|a<<BigInt(32)|r},oe=()=>{let n=ss().toString(16);return n.length%2!==0&&(n="0"+n),n="0x"+n,v.from(Be([n,"0x0000000000000000"]))},as=65,ns="0x0101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101";class rs extends G.PaymasterAPI{constructor(e,t,s,a){super(),this.paymasterUrl=e,this.entryPoint=t,this.clientId=s,this.secretKey=a}async getPaymasterAndData(e){const t={"Content-Type":"application/json"};if(me(this.paymasterUrl)){if(this.secretKey&&this.clientId)throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");this.secretKey?t["x-secret-key"]=this.secretKey:this.clientId&&(t["x-client-id"]=this.clientId,typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis&&(t["x-bundle-id"]=globalThis.APP_BUNDLE_ID)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(t.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(t.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,t["x-authorize-wallet"]="true")}const s=await fetch(this.paymasterUrl,{method:"POST",headers:t,body:JSON.stringify({jsonrpc:"2.0",id:1,method:"pm_sponsorUserOperation",params:[await es(e),{entryPoint:this.entryPoint}]})}),a=await s.json();if(!s.ok){const r=a.error||s.statusText,i=a.code||"UNKNOWN";throw new Error(`Paymaster error: ${r}
Status: ${s.status}
Code: ${i}`)}if(a.result)return(a.result.paymasterAndData||a.result).toString();throw new Error(`Paymaster returned no result from ${this.paymasterUrl}`)}}const is=(n,e,t,s)=>new rs(n,e,t,s);class J{constructor(e,t,s,a,r,i,o){this.resolve=e,this.reject=t,this.entryPoint=s,this.sender=a,this.userOpHash=r,this.nonce=i,this.timeout=o,ue(this,"resolved",!1),this.boundLisener=this.listenerCallback.bind(this)}start(){const e=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const t=await this.entryPoint.queryFilter(e,-10);t.length>0?this.listenerCallback(t[0]):this.entryPoint.once(e,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(){var i;for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];const a=arguments[arguments.length-1];if(!a.args){console.error("got event without args",a);return}if(a.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${a.args.sender}@${a.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((i=this.nonce)==null?void 0:i.toString())}`);return}const r=await a.getTransactionReceipt();a.args.success||await this.extractFailureReason(r),this.stop(),this.resolve(r),this.resolved=!0}async extractFailureReason(e){e.status=0;const t=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),e.blockHash);if(t[0]){let s=t[0].args.revertReason;s.startsWith("0x08c379a0")&&(s=Z.decode(["string"],"0x"+s.substring(10)).toString()),this.reject(new Error(`UserOp failed with reason: ${s}`))}}}class os extends Ne{constructor(e,t,s,a,r){super(),He(this,"provider",s),this.config=e,this.originalSigner=t,this.erc4337provider=s,this.httpRpcClient=a,this.smartAccountAPI=r}async sendTransaction(e,t){var o;const s=await b(e);await this.verifyAllNecessaryFields(s);const a=oe(),r=await this.smartAccountAPI.createSignedUserOp({target:s.to||"",data:((o=s.data)==null?void 0:o.toString())||"0x",value:s.value,gasLimit:s.gasLimit,nonce:a},t),i=await this.erc4337provider.constructUserOpTransactionResponse(r);try{await this.httpRpcClient.sendUserOpToBundler(r)}catch(l){throw this.unwrapError(l)}return i}unwrapError(e){var t,s;try{let a="Unknown Error";if(e.error)a=`The bundler has failed to include UserOperation in a batch: ${e.error}`;else if(e.body&&typeof e.body=="string"){const i=JSON.parse(e.body),o=e.status||"UNKNOWN",l=(i==null?void 0:i.code)||"UNKNOWN";let d=((t=i==null?void 0:i.error)==null?void 0:t.message)||((s=i==null?void 0:i.error)==null?void 0:s.data)||(i==null?void 0:i.error)||e.reason;if(d!=null&&d.includes("FailedOp")){let p="";const u=d.match(/FailedOp\((.*)\)/);if(u){const c=u[1].split(",");p=`(paymaster address: ${c[1]})`,d=c[2]}a=`The bundler has failed to include UserOperation in a batch: ${d} ${p}`}else a=`RPC error: ${d}
Status: ${o}
Code: ${l}`}const r=new Error(a);return r.stack=e.stack,r}catch{}return e}async verifyAllNecessaryFields(e){if(!e.to)throw new Error("Missing call target");if(!e.data&&!e.value)throw new Error("Missing call data or value")}connect(e){throw new Error("changing providers is not supported")}async getAddress(){return this.address||(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(e){return await this.smartAccountAPI.checkAccountPhantom()&&(console.log("Account contract not deployed yet. Deploying account before signing message"),await(await this.sendTransaction({to:await this.getAddress(),data:"0x"})).wait()),await this.originalSigner.signMessage(e)}async signTransaction(e,t){var o;const s=await b(e);await this.verifyAllNecessaryFields(s);const a=oe(),r=await this.smartAccountAPI.createSignedUserOp({target:s.to||"",data:((o=s.data)==null?void 0:o.toString())||"0x",value:s.value,gasLimit:s.gasLimit,nonce:a},t);return JSON.stringify(g.deepHexlify(await b(r)))}}class ls extends Ee{constructor(e,t,s,a,r,i,o){super({name:"ERC-4337 Custom Network",chainId:e}),this.chainId=e,this.config=t,this.originalSigner=s,this.originalProvider=a,this.httpRpcClient=r,this.entryPoint=i,this.smartAccountAPI=o,this.signer=new os(t,s,this,r,o)}getSigner(){return this.signer}async perform(e,t){if(e==="sendTransaction"||e==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");if(e==="estimateGas"){const{callGasLimit:s}=await this.smartAccountAPI.encodeUserOpCallDataAndGasLimit({target:t.transaction.to,data:t.transaction.data,value:t.transaction.value,gasLimit:t.transaction.gasLimit});return s}return await this.originalProvider.perform(e,t)}async getTransaction(e){return await super.getTransaction(e)}async getTransactionReceipt(e){const t=await e,s=await this.getSenderAccountAddress();return await new Promise((a,r)=>{new J(a,r,this.entryPoint,s,t).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(e,t,s){const a=await this.getSenderAccountAddress();return await new Promise((r,i)=>{new J(r,i,this.entryPoint,a,e,void 0,s).start()})}async constructUserOpTransactionResponse(e){const t=await b(e),s=await this.smartAccountAPI.getUserOpHash(t),a=async()=>await new Promise((r,i)=>{new J(r,i,this.entryPoint,t.sender,s,t.nonce).start()});return{hash:s,confirmations:0,from:t.sender,nonce:0,gasLimit:v.from(t.callGasLimit),value:v.from(0),data:de(t.callData),chainId:this.chainId,wait:async r=>{const i=await a();return t.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),i}}}async detectNetwork(){return this.originalProvider.detectNetwork()}}var le={name:"@thirdweb-dev/wallets",version:"2.3.2",main:"dist/thirdweb-dev-wallets.cjs.js",module:"dist/thirdweb-dev-wallets.esm.js",browser:{"./dist/thirdweb-dev-wallets.esm.js":"./dist/thirdweb-dev-wallets.browser.esm.js"},exports:{".":{module:{browser:"./dist/thirdweb-dev-wallets.browser.esm.js",default:"./dist/thirdweb-dev-wallets.esm.js"},default:"./dist/thirdweb-dev-wallets.cjs.js"},"./evm":{module:{browser:"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js",default:"./evm/dist/thirdweb-dev-wallets-evm.esm.js"},default:"./evm/dist/thirdweb-dev-wallets-evm.cjs.js"},"./evm/wallets/okx":{module:{browser:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js",default:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js"},default:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js"},"./evm/wallets/base":{module:{browser:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js",default:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js"},default:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js"},"./evm/wallets/safe":{module:{browser:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js",default:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js"},default:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js"},"./evm/wallets/async":{module:{browser:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js",default:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js"},default:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js"},"./evm/wallets/frame":{module:{browser:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js",default:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js"},default:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js"},"./evm/wallets/magic":{module:{browser:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js",default:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js"},default:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js"},"./evm/wallets/rabby":{module:{browser:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js",default:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js"},default:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js"},"./evm/wallets/trust":{module:{browser:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js",default:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js"},default:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js"},"./evm/wallets/blocto":{module:{browser:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js",default:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js"},default:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js"},"./evm/wallets/coin98":{module:{browser:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js",default:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js"},default:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js"},"./evm/wallets/engine":{module:{browser:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js",default:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js"},default:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js"},"./evm/wallets/ethers":{module:{browser:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js",default:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js"},default:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js"},"./evm/wallets/onekey":{module:{browser:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.browser.esm.js",default:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.esm.js"},default:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.cjs.js"},"./evm/wallets/signer":{module:{browser:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js",default:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js"},default:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js"},"./evm/wallets/zerion":{module:{browser:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js",default:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js"},default:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js"},"./evm/wallets/aws-kms":{module:{browser:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js",default:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js"},default:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js"},"./evm/wallets/gcp-kms":{module:{browser:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js",default:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js"},default:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js"},"./evm/wallets/phantom":{module:{browser:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js",default:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js"},default:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js"},"./evm/wallets/abstract":{module:{browser:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js",default:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js"},default:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js"},"./evm/wallets/injected":{module:{browser:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js",default:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js"},default:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js"},"./evm/wallets/metamask":{module:{browser:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js",default:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js"},default:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js"},"./evm/wallets/core-wallet":{module:{browser:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js",default:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js"},default:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js"},"./evm/wallets/private-key":{module:{browser:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js",default:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js"},default:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js"},"./evm/connectors/okx":{module:{browser:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js",default:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js"},default:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js"},"./evm/wallets/local-wallet":{module:{browser:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js",default:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js"},default:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js"},"./evm/wallets/paper-wallet":{module:{browser:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js",default:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js"},default:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js"},"./evm/wallets/smart-wallet":{module:{browser:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js",default:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js"},default:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js"},"./evm/connectors/safe":{module:{browser:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js",default:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js"},default:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js"},"./evm/connectors/frame":{module:{browser:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js",default:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js"},default:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js"},"./evm/connectors/magic":{module:{browser:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js",default:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js"},default:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js"},"./evm/connectors/paper":{module:{browser:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js",default:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js"},default:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js"},"./evm/connectors/rabby":{module:{browser:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js",default:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js"},default:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js"},"./evm/connectors/trust":{module:{browser:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js",default:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js"},default:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js"},"./evm/wallets/rainbow-wallet":{module:{browser:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js",default:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js"},default:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js"},"./evm/wallets/wallet-connect":{module:{browser:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js",default:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js"},default:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js"},"./evm/connectors/blocto":{module:{browser:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js",default:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js"},default:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js"},"./evm/connectors/coin98":{module:{browser:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js",default:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js"},default:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js"},"./evm/connectors/onekey":{module:{browser:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.browser.esm.js",default:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.esm.js"},default:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.cjs.js"},"./evm/connectors/signer":{module:{browser:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js",default:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js"},default:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js"},"./evm/connectors/zerion":{module:{browser:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js",default:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js"},default:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js"},"./evm/wallets/coinbase-wallet":{module:{browser:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js",default:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js"},default:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js"},"./evm/wallets/embedded-wallet":{module:{browser:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js",default:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js"},default:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js"},"./evm/connectors/phantom":{module:{browser:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js",default:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js"},default:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js"},"./evm/connectors/rainbow":{module:{browser:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js",default:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js"},default:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js"},"./evm/connectors/injected":{module:{browser:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js",default:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js"},default:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js"},"./evm/connectors/metamask":{module:{browser:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js",default:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js"},default:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js"},"./evm/wallets/local-wallet-node":{module:{browser:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js",default:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js"},default:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js"},"./evm/wallets/wallet-connect-v1":{module:{browser:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js",default:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js"},default:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js"},"./evm/wallets/crypto-defi-wallet":{module:{browser:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js",default:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js"},default:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js"},"./evm/wallets/aws-secrets-manager":{module:{browser:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js",default:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js"},default:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js"},"./evm/connectors/core-wallet":{module:{browser:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js",default:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js"},default:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js"},"./evm/connectors/local-wallet":{module:{browser:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js",default:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js"},default:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js"},"./evm/connectors/smart-wallet":{module:{browser:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js",default:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js"},default:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js"},"./evm/connectors/wallet-connect":{module:{browser:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js",default:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js"},default:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js"},"./evm/connectors/coinbase-wallet":{module:{browser:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js",default:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js"},default:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js"},"./evm/connectors/embedded-wallet":{module:{browser:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js",default:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js"},default:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js"},"./evm/wallets/token-bound-smart-wallet":{module:{browser:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js",default:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js"},default:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js"},"./evm/connectors/wallet-connect-v1":{module:{browser:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js",default:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js"},default:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js"},"./evm/connectors/crypto-defi-wallet":{module:{browser:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js",default:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js"},default:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js"},"./evm/connectors/token-bound-smart-wallet":{module:{browser:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js",default:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js"},default:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js"},"./evm/connectors/embedded-wallet/implementations":{module:{browser:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js",default:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js"},default:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js"},"./package.json":"./package.json"},types:"dist/thirdweb-dev-wallets.cjs.d.ts",repository:"https://github.com/thirdweb-dev/js/tree/main/packages/wallets",license:"Apache-2.0",bugs:{url:"https://github.com/thirdweb-dev/js/issues"},author:"thirdweb eng <eng@thirdweb.com>",files:["dist/","evm/"],preconstruct:{entrypoints:["index.ts","evm/index.ts","evm/connectors/*/index.ts","evm/connectors/embedded-wallet/implementations/index.ts","evm/wallets/**"],exports:{envConditions:["browser"]}},sideEffects:!1,dependencies:{"@account-abstraction/contracts":"^0.5.0","@account-abstraction/sdk":"^0.5.0","@account-abstraction/utils":"^0.5.0","@blocto/sdk":"^0.5.4","@coinbase/wallet-sdk":"^3.7.1","@google-cloud/kms":"3.0.1","@magic-ext/connect":"^6.7.2","@magic-ext/oauth":"^7.6.2","@magic-sdk/provider":"^13.6.2","@metamask/eth-sig-util":"^4.0.0","@paperxyz/embedded-wallet-service-sdk":"^1.2.5","@paperxyz/sdk-common-utilities":"^0.1.0","@safe-global/safe-core-sdk":"^3.3.4","@safe-global/safe-ethers-adapters":"0.1.0-alpha.17","@safe-global/safe-ethers-lib":"^1.9.4","@thirdweb-dev/chains":"workspace:*","@thirdweb-dev/crypto":"workspace:*","@thirdweb-dev/contracts-js":"workspace:*","@thirdweb-dev/sdk":"workspace:*","@walletconnect/core":"^2.9.1","@walletconnect/ethereum-provider":"^2.9.1","@walletconnect/jsonrpc-utils":"^1.0.8","@walletconnect/modal":"^2.6.1","@walletconnect/types":"^2.9.1","@walletconnect/utils":"^2.10.2","@walletconnect/web3wallet":"^1.8.7","asn1.js":"5.4.1","bn.js":"5.2.0",buffer:"^6.0.3","eth-provider":"^0.13.6","ethereumjs-util":"^7.1.3",eventemitter3:"^5.0.1","key-encoder":"2.0.3","magic-sdk":"^13.6.2","web3-core":"1.5.2"},peerDependencies:{"@aws-sdk/client-secrets-manager":"^3.256.0","@noble/ed25519":"^1.7.1",bs58:"^5.0.0",ethers:"^5.7.2","ethers-aws-kms-signer":"^1.3.2",tweetnacl:"^1.0.3"},peerDependenciesMeta:{tweetnacl:{optional:!0},"@aws-sdk/client-secrets-manager":{optional:!0},"ethers-aws-kms-signer":{optional:!0},"@noble/ed25519":{optional:!0},bs58:{optional:!0},ethers:{optional:!0}},devDependencies:{"@aws-sdk/client-secrets-manager":"^3.378.0","@babel/plugin-proposal-class-properties":"7.18.6","@babel/plugin-transform-flow-strip-types":"^7.22.5","@babel/plugin-transform-private-methods":"7.22.5","@noble/ed25519":"^1.7.1","@preconstruct/cli":"2.7.0","@thirdweb-dev/tsconfig":"workspace:*","@types/bn.js":"^5.1.1",abitype:"^0.2.5","babel-plugin-transform-inline-environment-variables":"^0.4.4",bs58:"^5.0.0","cross-env":"^7.0.3","eslint-config-thirdweb":"workspace:*","eslint-plugin-better-tree-shaking":"0.0.4","eslint-plugin-tsdoc":"^0.2.16","ethereum-provider":"^0.7.7",ethers:"^5.7.2","ethers-aws-kms-signer":"^1.3.2",rimraf:"^3.0.2",tweetnacl:"^1.0.3",typescript:"^5.1.6","typedoc-gen":"workspace:*"},scripts:{format:"prettier --write 'src/**/*'",lint:"eslint src/ && bunx publint --strict --level warning",fix:"eslint src/ --fix",clean:"rm -rf dist/",build:"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build","preconstruct:fix":"preconstruct fix",push:"yalc push",typedoc:"node scripts/typedoc.mjs"},engines:{node:">=18"}};class cs{constructor(e,t,s,a,r){this.bundlerUrl=e,this.entryPointAddress=t,this.chainId=s;const i={};if(me(this.bundlerUrl)){const o=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;r?i["x-secret-key"]=r:a&&(i["x-client-id"]=a,o&&(i["x-bundle-id"]=o)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(i.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(i.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,i["x-authorize-wallet"]="true"),i["x-sdk-version"]=le.version,i["x-sdk-name"]=le.name,i["x-sdk-platform"]=o?"react-native":window.bridge!==void 0?"webGL":"browser"}this.userOpJsonRpcProvider=new Se({url:this.bundlerUrl,headers:i},{name:"Connected bundler network",chainId:s}),this.initializing=this.validateChainId()}async validateChainId(){const e=await this.userOpJsonRpcProvider.send("eth_chainId",[]),t=parseInt(e);if(t!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${t}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(e){await this.initializing;const t=g.deepHexlify(await b(e)),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",s),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[t,this.entryPointAddress])}async estimateUserOpGas(e){await this.initializing;const t=g.deepHexlify(await b(e)),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_estimateUserOperationGas",s),await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[t,this.entryPointAddress])}async printUserOperation(e,t){}}function ds(n,e,t,s){const a=x.EntryPoint__factory.connect(n.entryPointAddress,t),r=new cs(n.bundlerUrl,n.entryPointAddress,s,n.clientId,n.secretKey);return new ls(s,n,n.localSigner,t,r,a,e)}class us{constructor(e){ue(this,"isPhantom",!0),this.provider=e.provider,this.overheads=e.overheads,this.entryPointAddress=e.entryPointAddress,this.accountAddress=e.accountAddress,this.paymasterAPI=e.paymasterAPI,this.entryPointView=x.EntryPoint__factory.connect(e.entryPointAddress,e.provider).connect(Ue)}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getPreVerificationGas(e){const t=await b(e);return G.calcPreVerificationGas(t,this.overheads)}packUserOp(e){return g.packUserOp(e,!1)}async encodeUserOpCallDataAndGasLimit(e,t){const s=ce(e.value)??v.from(0),a=t?e.data:await this.prepareExecute(e.target,s,e.data).then(o=>o.encode());let r;return await this.checkAccountPhantom()?(t?r=(await Promise.all(t.targets.map((l,d)=>this.provider.estimateGas({from:this.getAccountAddress(),to:t.targets[d],data:t.data[d],value:t.values[d]})))).reduce((l,d)=>l.add(d),v.from(0)):r=await this.provider.estimateGas({from:this.getAccountAddress(),to:e.target,data:e.data,value:e.value}),r=r.mul(120).div(100),r.lt(3e4)&&(r=v.from(5e5))):r=ce(e.gasLimit)??await this.provider.estimateGas({from:this.entryPointAddress,to:this.getAccountAddress(),data:a,value:e.value}),{callData:a,callGasLimit:r}}async getUserOpHash(e){const t=await this.provider.getNetwork().then(s=>s.chainId);return ts(e,this.entryPointAddress,t)}async getAccountAddress(){return this.senderAddress||(this.accountAddress?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(e){if(!e||e==="0x")return 0;const t=e.substring(0,42),s="0x"+e.substring(42);return await this.provider.estimateGas({to:t,data:s})}async createUnsignedUserOp(e,t){const{callData:s,callGasLimit:a}=await this.encodeUserOpCallDataAndGasLimit(e,t),r=await this.getInitCode(),i=await this.estimateCreationGas(r),o=v.from(await this.getVerificationGasLimit()).add(i);let{maxFeePerGas:l,maxPriorityFeePerGas:d}=e;if(!l||!d){const m=await De(this.provider);if(d||(d=m.maxPriorityFeePerGas??void 0),!l){l=m.maxFeePerGas??void 0,d=m.maxPriorityFeePerGas??void 0;const U=(await this.provider.getNetwork()).chainId;(U===Ge.chainId||U===Re.chainId||U===Le.chainId)&&(d=l)}}const p={sender:this.getAccountAddress(),nonce:e.nonce??this.getNonce(),initCode:r,callData:s,callGasLimit:a,verificationGasLimit:o,maxFeePerGas:l,maxPriorityFeePerGas:d,paymasterAndData:"0x"};let u,c=p;if(this.paymasterAPI){try{await b(c)}catch{}const m={sender:c.sender,nonce:c.nonce,initCode:c.initCode,callData:c.callData,callGasLimit:c.callGasLimit,verificationGasLimit:c.verificationGasLimit,maxFeePerGas:c.maxFeePerGas,maxPriorityFeePerGas:c.maxPriorityFeePerGas,paymasterAndData:ns,signature:$e(L.Buffer.alloc(as,1))};c=await b(m);const A=G.calcPreVerificationGas(c);c.preVerificationGas=A,u=await this.paymasterAPI.getPaymasterAndData(c),u==="0x"&&(u=void 0)}if(u)return c.paymasterAndData=u,{...c,signature:""};{const m={...c,paymasterAndData:"0x"};return m.preVerificationGas=await this.getPreVerificationGas(m),{...m,signature:""}}}async signUserOp(e){const t=await this.getUserOpHash(e),s=await this.signUserOpHash(t);return{...e,signature:s}}async createSignedUserOp(e,t){return await this.signUserOp(await this.createUnsignedUserOp(e,t))}async getUserOpReceipt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3e4,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:2e3;const a=Date.now()+t;for(;Date.now()<a;){const r=await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(e));if(r[0])return r[0].transactionHash;await new Promise(i=>setTimeout(i,s))}return null}}function ce(n){return!n||n===""?null:v.from(n.toString())}class ms extends us{constructor(e,t){super({...e,provider:t}),this.params=e,this.sdk=q.fromPrivateKey(Ce,e.chain,{clientId:e.clientId,secretKey:e.secretKey})}async getChainId(){return await this.provider.getNetwork().then(e=>e.chainId)}async getAccountContract(){var e;return this.accountContract||((e=this.params.accountInfo)!=null&&e.abi?this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),this.params.accountInfo.abi):this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),ke)),this.accountContract}async getAccountInitCode(){const e=await this.getFactoryContract();console.log("Deploying smart wallet via factory");const t=await this.params.localSigner.getAddress(),s=await this.params.factoryInfo.createAccount(e,t);try{console.log("Cost to deploy smart wallet: ",(await s.estimateGasCost()).ether,"ETH")}catch(a){console.error("Cost to deploy smart wallet: unknown",a)}return Ie([e.getAddress(),s.encode()])}async getFactoryContract(){var e;return this.factoryContract?this.factoryContract:((e=this.params.factoryInfo)!=null&&e.abi?this.factoryContract=await this.sdk.getContract(this.params.factoryAddress,this.params.factoryInfo.abi):this.factoryContract=await this.sdk.getContract(this.params.factoryAddress),this.factoryContract)}async getCounterFactualAddress(){if(this.params.accountAddress)return this.params.accountAddress;const e=await this.getFactoryContract(),t=await this.params.localSigner.getAddress();return this.params.factoryInfo.getAccountAddress(e,t)}async getNonce(){if(await this.checkAccountPhantom())return v.from(0);const e=await this.getAccountContract();return this.params.accountInfo.getNonce(e)}async prepareExecute(e,t,s){const a=await this.getAccountContract();return this.params.accountInfo.execute(a,e,t,s)}async prepareExecuteBatch(e,t,s){return(await this.getAccountContract()).prepare("executeBatch",[e,t,s])}async signUserOpHash(e){return await this.params.localSigner.signMessage(_e(e))}async isAcountDeployed(){return!await this.checkAccountPhantom()}}class Ps extends Pe{constructor(e){super(),this.config=e}async initialize(e){const t=this.config,s=je(t.chain,{clientId:t.clientId,secretKey:t.secretKey});this.chainId=(await s.getNetwork()).chainId;const a=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,r=this.config.paymasterUrl||`https://${this.chainId}.bundler.thirdweb.com`,i=t.entryPointAddress||Te,o=await e.personalWallet.getSigner(),l={chain:t.chain,localSigner:o,entryPointAddress:i,bundlerUrl:a,paymasterAPI:this.config.gasless?this.config.paymasterAPI?this.config.paymasterAPI:is(r,i,this.config.clientId,this.config.secretKey):void 0,factoryAddress:t.factoryAddress,accountAddress:e.accountAddress,factoryInfo:t.factoryInfo||this.defaultFactoryInfo(),accountInfo:t.accountInfo||this.defaultAccountInfo(),clientId:t.clientId,secretKey:t.secretKey};this.personalWallet=e.personalWallet;const d=new ms(l,s);this.aaProvider=ds(l,d,s,this.chainId),this.accountApi=d}async connect(e){return await this.initialize(e),await this.getAddress()}getProvider(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider)}async getSigner(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider.getSigner())}async getAddress(){return(await this.getSigner()).getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async disconnect(){this.personalWallet=void 0,this.aaProvider=void 0}async switchChain(e){if((await(await this.getProvider()).getNetwork()).chainId!==e)throw new Error("Not supported.")}setupListeners(){return Promise.resolve()}updateChains(e){}async hasPermissionToExecute(e){var i;const t=await this.getAccountContract(),a=await(await this.getSigner()).getAddress(),r=(i=(await t.account.getAllSigners()).filter(o=>X(o.signer)===X(a))[0])==null?void 0:i.permissions;return r?r.approvedCallTargets.includes(e.getTarget()):!1}async send(e){return(await this.getSigner()).sendTransaction({to:e.getTarget(),data:e.encode(),value:await e.getValue()})}async execute(e){return{receipt:await(await this.send(e)).wait()}}async sendBatch(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.getSigner(),{tx:s,batchData:a}=await this.prepareBatchTx(e);return await t.sendTransaction({to:await t.getAddress(),data:s.encode(),value:0},a)}async executeBatch(e){return{receipt:await(await this.sendBatch(e)).wait()}}async sendRaw(e){if(!this.accountApi)throw new Error("Personal wallet not connected");return(await this.getSigner()).sendTransaction(e)}async executeRaw(e){return{receipt:await(await this.sendRaw(e)).wait()}}async sendBatchRaw(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.getSigner(),s=await this.prepareBatchRaw(e);return t.sendTransaction({to:await t.getAddress(),data:s.tx.encode(),value:0},s.batchData)}async executeBatchRaw(e){return{receipt:await(await this.sendBatchRaw(e)).wait()}}async estimate(e){if(!this.accountApi)throw new Error("Personal wallet not connected");return this.estimateTx({target:e.getTarget(),data:e.encode(),value:await e.getValue()})}async estimateRaw(e){var s;if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await b(e);return this.estimateTx({target:t.to||g.AddressZero,data:((s=t.data)==null?void 0:s.toString())||"",value:t.value||v.from(0)})}async estimateBatch(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:t,batchData:s}=await this.prepareBatchTx(e);return this.estimateTx({target:t.getTarget(),data:t.encode(),value:await t.getValue()},s)}async estimateBatchRaw(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:t,batchData:s}=await this.prepareBatchRaw(e);return this.estimateTx({target:t.getTarget(),data:t.encode(),value:await t.getValue()},s)}async deploy(){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.getSigner();return{receipt:await(await e.sendTransaction({to:await e.getAddress(),data:"0x"},{targets:[],data:[],values:[]})).wait()}}async isDeployed(){if(!this.accountApi)throw new Error("Personal wallet not connected");return await this.accountApi.isAcountDeployed()}async deployIfNeeded(){await this.isDeployed()||await this.deploy()}async grantPermissions(e,t){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantPermissions(e,t)}async revokePermissions(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAccess(e)}async addAdmin(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantAdminPermissions(e)}async removeAdmin(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAdminPermissions(e)}async getAllActiveSigners(){var t;if(await this.isDeployed())return(await this.getAccountContract()).account.getAllAdminsAndSigners();{const s=await((t=this.personalWallet)==null?void 0:t.getSigner());if(!s)throw new Error("Personal wallet not connected");return[{isAdmin:!0,signer:await s.getAddress(),permissions:{startDate:new Date(0),expirationDate:new Date(0),nativeTokenLimitPerTransaction:v.from(0),approvedCallTargets:[]}}]}}async getAccountContract(){var s;if(!await this.isDeployed())throw new Error("Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.");const t=q.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(s=this.config.accountInfo)!=null&&s.abi?t.getContract(await this.getAddress(),this.config.accountInfo.abi):t.getContract(await this.getAddress())}async getFactoryContract(){var t;const e=q.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(t=this.config.factoryInfo)!=null&&t.abi?e.getContract(this.config.factoryAddress,this.config.factoryInfo.abi):e.getContract(this.config.factoryAddress)}defaultFactoryInfo(){return{createAccount:async(e,t)=>e.prepare("createAccount",[t,Q("")]),getAccountAddress:async(e,t)=>await e.call("getAddress",[t,Q("")])}}defaultAccountInfo(){return{execute:async(e,t,s,a)=>e.prepare("execute",[t,s,a]),getNonce:async e=>e.call("getNonce",[])}}async estimateTx(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");let s=v.from(0);const[a,r]=await Promise.all([this.getProvider(),this.isDeployed()]);r||(s=await this.estimateDeploymentGasLimit());const[{callGasLimit:i},o]=await Promise.all([this.accountApi.encodeUserOpCallDataAndGasLimit(e,t),Oe(a)]),l=i.mul(o),d=s.mul(o),p=d.add(l);return{ether:xe(p),wei:p,details:{deployGasLimit:s,transactionGasLimit:i,gasPrice:o,transactionCost:l,deployCost:d,totalCost:p}}}async estimateDeploymentGasLimit(){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.accountApi.getInitCode(),[t,s]=await Promise.all([this.accountApi.estimateCreationGas(e),this.accountApi.getVerificationGasLimit()]);return v.from(s).add(t)}async prepareBatchRaw(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await Promise.all(e.map(i=>b(i))),s=t.map(i=>i.to||g.AddressZero),a=t.map(i=>i.data||"0x"),r=t.map(i=>i.value||v.from(0));return{tx:await this.accountApi.prepareExecuteBatch(s,r,a),batchData:{targets:s,data:a,values:r}}}async prepareBatchTx(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=e.map(r=>r.getTarget()),s=e.map(r=>r.encode()),a=await Promise.all(e.map(r=>r.getValue()));return{tx:await this.accountApi.prepareExecuteBatch(t,a,s),batchData:{targets:t,data:s,values:a}}}}export{Ps as SmartWalletConnector};
